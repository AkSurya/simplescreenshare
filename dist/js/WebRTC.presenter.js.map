{"version":3,"sources":["src/webrtc.presenter.js"],"names":["fieldUsername","document","getElementById","usersListElement","localVideo","remoteVideo","remoteVideo2","remoteVideo3","socket","caller","receiver","peerConnection","servers","sendToServer","msg","emit","JSON","stringify","updateListElement","usersArray","listElement","updatedList","map","user","name","value","join","innerHTML","callButtons","getElementsByClassName","Object","keys","forEach","key","addEventListener","inviteToVideoCall","getLocalMedia","navigator","mediaDevices","enumerateDevices","devices","realV","i","length","device","kind","push","alert","mediaConstraints","audio","video","width","height","deviceId","getUserMedia","mediaStream","getTracks","track","addTrack","console","error","connect","event","info","io","date","Date","now","type","on","msgJSON","parse","users","answerOffer","receiveAnswer","addICECandidate","warn","target","getAttribute","log","createPeerConnection","srcObject","videoIndex","RTCPeerConnection","onicecandidate","candidate","onnegotiationneeded","createOffer","ontrack","transceiver","mid","streams","offer","setLocalDescription","sdp","localDescription","setRemoteDescription","createAnswer","answer","RTCIceCandidate","addIceCandidate","$","hide","ready","fullScreen","element","requestFullscreen","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen"],"mappings":"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","sourcesContent":["// client-side js\n// run by the browser each time your view template is loaded\n\n(function () {\n\n  /* UI */\n\n  const fieldUsername = document.getElementById('username');\n  const usersListElement = document.getElementById('users-list');\n  const localVideo = document.getElementById('local-video');\n  const remoteVideo = document.getElementById('remote-video1');\n  const remoteVideo2 = document.getElementById('remote-video2');\n  const remoteVideo3 = document.getElementById('remote-video3');\n\n\n  /* Globals */\n\n  let socket;\n  let caller;\n  let receiver;\n  let peerConnection;\n\n  const servers = {\n    'iceServers': [\n      { 'urls': 'stun:stun.stunprotocol.org:3478' },\n      { 'urls': 'stun:stun.l.google.com:19302' },\n    ]\n  };\n\n  /* Functions */\n\n  function sendToServer(msg) {\n    socket.emit('message', JSON.stringify(msg));\n  }\n\n  function updateListElement(usersArray, listElement) {\n    const updatedList = usersArray.map(user => {\n      if (user.name == fieldUsername.value)\n        return `\n        <li class=\"user-item\">\n          ${user.name}\n        </li>`\n      else\n        return `\n        <li class=\"user-item\">\n          ${user.name} <button class=\"call\" data-target=\"${user.name}\">Call</button>\n        </li>`}\n    ).join('');\n\n    // Re-render user list\n    listElement.innerHTML = updatedList;\n\n    // Add event listeners to call button next to the user\n    const callButtons = document.getElementsByClassName('call');\n    Object.keys(callButtons).forEach(key => callButtons[key].addEventListener('click', inviteToVideoCall));\n  }\n\n  async function getLocalMedia(peerConnection) {\n    try {\n      var devices = await navigator.mediaDevices.enumerateDevices();\n      var realV = []\n      for (var i = 0; i < devices.length; i++) {\n        var device = devices[i];\n        if (device.kind === 'videoinput') {\n          realV.push(device)\n        }\n      }\n      if (realV.length < 1) {\n        alert(\"no device!\");\n        return;\n      }\n\n      const mediaConstraints = { audio: false, video: { width: 1680, height: 1050, deviceId: realV[0].deviceId } };\n\n      const mediaStream = await navigator.mediaDevices.getUserMedia(mediaConstraints);\n      mediaStream.getTracks().forEach(track => {\n        peerConnection.addTrack(track, mediaStream)\n      });\n      return mediaStream;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  function connect(event) {\n    // event.preventDefault();\n\n    // Hide form overlay\n    // event.target.parentNode.classList.add('hidden');\n\n    caller = fieldUsername.value;\n\n    console.info(`Connecting ${caller}...`);\n\n    // Connect to signaling server\n    socket = io('https://localhost:433');\n\n    // We tell the server who we are\n    sendToServer({\n      name: caller,\n      date: Date.now(),\n      type: 'username',\n    });\n\n    // When we receive the updated list of users we render them in the UI\n    socket.on('users', (msg) => {\n      const msgJSON = JSON.parse(msg);\n      updateListElement(msgJSON.users, usersListElement)\n    });\n\n    // Listen to messages coming from signaling server\n    socket.on('message', (msg) => {\n      switch (msg.type) {\n        case 'offer':\n          answerOffer(msg);\n          break;\n\n        case 'answer':\n          receiveAnswer(msg);\n          break;\n\n        case 'ice-candidate':\n          addICECandidate(msg);\n          break;\n      }\n    });\n\n    socket.on('connect', (msg) => {\n      console.error('Connected')\n    })\n  }\n\n  async function inviteToVideoCall(event) {\n    // Check if we have an open connection already\n    if (peerConnection) {\n      console.warn('You already have a call open.');\n    } else {\n      receiver = event.target.getAttribute('data-target');\n\n      if (receiver === caller) {\n        alert(\"You can't call yourself.\");\n        return;\n      }\n\n      log('invite')\n      peerConnection = createPeerConnection();\n\n      // Requesting webcam access...\n      localVideo.srcObject = await getLocalMedia(peerConnection);\n    }\n  }\n  var videoIndex = 0;\n  function createPeerConnection() {\n    console.log(`${caller} inviting ${receiver} to video call...`);\n\n    // Starts the peer connection\n    const peerConnection = new RTCPeerConnection(servers);\n\n    // Sends out our ICE candidate through our signaling server\n    peerConnection.onicecandidate = ({ candidate }) => {\n      if (candidate) {\n        sendToServer({\n          type: 'ice-candidate',\n          target: receiver, // on the receiver side this is undefined.\n          candidate: candidate,\n        });\n      }\n    };\n\n    // Creates an offer and sends it out through the signaling server\n    peerConnection.onnegotiationneeded = createOffer;\n\n    // When we get a track we add it to our remote video element\n\n    peerConnection.ontrack = event => {\n      console.error('-------------------------')\n      console.log(event.transceiver.mid);\n      console.log(event.streams);\n      console.error('-------------------------')\n      if (event.transceiver.mid == 0) {\n        remoteVideo.srcObject = event.streams[0]\n      }\n      if (event.transceiver.mid == 1) {\n        remoteVideo2.srcObject = event.streams[0]\n      }\n      if (event.transceiver.mid == 2) {\n        remoteVideo3.srcObject = event.streams[0]\n      }\n    };\n\n    return peerConnection;\n  }\n\n  async function createOffer() {\n    console.log(`${caller} is creating an offer for ${receiver}`);\n\n    try {\n      // 1. Create an offer\n      const offer = await peerConnection.createOffer();\n      // 2. set the offer as local description\n      await peerConnection.setLocalDescription(offer);\n      // Send offer to remote peer\n      sendToServer({\n        name: caller,\n        target: receiver,\n        type: 'offer',\n        sdp: peerConnection.localDescription,\n      });\n    } catch (error) {\n      console.error(`Error when creating the offer: ${error}`);\n    }\n  }\n\n  async function answerOffer(msg) {\n    // We save the reference of the people sending the offer\n    const receiver = msg.name;\n\n    console.log(`${caller} is creating an answer for ${receiver}`);\n\n    // Start the PeerConnection\n    log('answer')\n    peerConnection = createPeerConnection();\n\n    // 4. The recipient receives the offer and record it as the remote description\n    try {\n      await peerConnection.setRemoteDescription(msg.sdp);\n      // 5. The recipient includes its stream to the connection\n      localVideo.srcObject = await getLocalMedia(peerConnection);\n      // 6. The recipient creates an answer\n      const answer = await peerConnection.createAnswer();\n      // 7. The recipient set the answer as its local description.\n      await peerConnection.setLocalDescription(answer);\n      // 8. The recipient uses the signaling server to send the answer to the caller.\n      sendToServer({\n        name: caller,\n        target: receiver,\n        type: 'answer',\n        sdp: peerConnection.localDescription,\n      });\n    } catch (error) {\n      console.error(`Error when creating the answer: ${error}`);\n    }\n  }\n\n  // This function i scalled when the caller receives an answer from the recipient about\n  // the video call offer we sent\n  async function receiveAnswer(msg) {\n    console.log('handling answer ', msg);\n\n    // 9. The caller receives the answer.\n    // 10. The caller set the answer as the remote description. It know knows the\n    // configuration of both peers. Media begins to flow as configured\n    await peerConnection.setRemoteDescription(msg.sdp);\n  }\n\n  async function addICECandidate(msg) {\n    const candidate = new RTCIceCandidate(msg.candidate);\n\n    try {\n      await peerConnection.addIceCandidate(candidate);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /* DOM event listeners */\n\n  // formLogin.addEventListener('submit', connect);\n  connect();\n  $('.form-overlay').hide();\n\n  $(document).ready(() => {\n    function fullScreen(element) {\n      element.addEventListener('click', function () {\n        if (element.requestFullscreen) {\n          element.requestFullscreen();\n        }\n        else if (element.webkitRequestFullscreen) {\n          element.webkitRequestFullscreen();\n        }\n        else if (element.mozRequestFullScreen) {\n          element.mozRequestFullScreen();\n        }\n        else if (element.msRequestFullscreen) {\n          element.msRequestFullscreen();\n        }\n      });\n    }\n\n    fullScreen(document.getElementById('remote-video1'));\n    fullScreen(document.getElementById('remote-video2'));\n    fullScreen(document.getElementById('remote-video3'));\n\n  });\n\n})();"],"file":"webrtc.presenter.js"}