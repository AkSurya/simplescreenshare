{"version":3,"sources":["src/webrtc.js"],"names":["formLogin","document","getElementById","fieldUsername","usersListElement","localVideo","remoteVideo","remoteVideo2","remoteVideo3","socket","caller","receiver","peerConnection","servers","sendToServer","msg","emit","JSON","stringify","updateListElement","usersArray","listElement","updatedList","map","user","name","value","join","innerHTML","callButtons","getElementsByClassName","Object","keys","forEach","key","addEventListener","inviteToVideoCall","getLocalMedia","navigator","mediaDevices","enumerateDevices","devices","realV","i","length","device","kind","push","alert","mediaConstraints","audio","video","width","height","deviceId","getUserMedia","mediaStream","getTracks","track","addTrack","console","error","connect","event","info","io","date","Date","now","type","on","msgJSON","parse","users","answerOffer","receiveAnswer","addICECandidate","warn","target","getAttribute","log","createPeerConnection","srcObject","videoIndex","RTCPeerConnection","onicecandidate","candidate","onnegotiationneeded","createOffer","ontrack","transceiver","mid","streams","offer","setLocalDescription","sdp","localDescription","setRemoteDescription","createAnswer","answer","RTCIceCandidate","addIceCandidate","$","hide","ready","fullScreen","element","requestFullscreen","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen"],"mappings":"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","sourcesContent":["// client-side js\r\n// run by the browser each time your view template is loaded\r\n\r\n(function () {\r\n\r\n    /* UI */\r\n  \r\n    const formLogin = document.getElementById('form-login');\r\n    const fieldUsername = document.getElementById('username');\r\n    const usersListElement = document.getElementById('users-list');\r\n    const localVideo = document.getElementById('local-video');\r\n    const remoteVideo = document.getElementById('remote-video1');\r\n    const remoteVideo2 = document.getElementById('remote-video2');\r\n    const remoteVideo3 = document.getElementById('remote-video3');\r\n  \r\n  \r\n    /* Globals */\r\n  \r\n    let socket;\r\n    let caller;\r\n    let receiver;\r\n    let peerConnection;\r\n   \r\n    const servers = {\r\n      'iceServers': [\r\n        { 'urls': 'stun:stun.stunprotocol.org:3478' },\r\n        { 'urls': 'stun:stun.l.google.com:19302' },\r\n      ]\r\n    };\r\n  \r\n    /* Functions */\r\n  \r\n    function sendToServer(msg) {\r\n      socket.emit('message', JSON.stringify(msg));\r\n    }\r\n  \r\n    function updateListElement(usersArray, listElement) {\r\n      const updatedList = usersArray.map(user => {\r\n        if (user.name == fieldUsername.value)\r\n          return `\r\n        <li class=\"user-item\">\r\n          ${user.name}\r\n        </li>`\r\n        else\r\n          return `\r\n        <li class=\"user-item\">\r\n          ${user.name} <button class=\"call\" data-target=\"${user.name}\">Call</button>\r\n        </li>`}\r\n      ).join('');\r\n  \r\n      // Re-render user list\r\n      listElement.innerHTML = updatedList;\r\n  \r\n      // Add event listeners to call button next to the user\r\n      const callButtons = document.getElementsByClassName('call');\r\n      Object.keys(callButtons).forEach(key => callButtons[key].addEventListener('click', inviteToVideoCall));\r\n    }\r\n  \r\n    async function getLocalMedia(peerConnection) {\r\n      try {\r\n        var devices = await navigator.mediaDevices.enumerateDevices();\r\n        var realV = []\r\n        for(var i = 0; i < devices.length; i ++){\r\n          var device = devices[i];\r\n          if (device.kind === 'videoinput') {\r\n            realV.push(device)\r\n          }\r\n        }\r\n        if(realV.length < 1){\r\n          alert(\"no device!\");\r\n          return;\r\n        }\r\n  \r\n        const mediaConstraints = { audio: false, video: { width: 1680, height: 1050, deviceId:realV[0].deviceId } };\r\n  \r\n        const mediaStream = await navigator.mediaDevices.getUserMedia(mediaConstraints);\r\n        mediaStream.getTracks().forEach(track => {\r\n          peerConnection.addTrack(track, mediaStream)\r\n        });\r\n        return mediaStream;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n  \r\n    function connect(event) {\r\n      // event.preventDefault();\r\n  \r\n      // Hide form overlay\r\n      // event.target.parentNode.classList.add('hidden');\r\n  \r\n      caller = fieldUsername.value;\r\n  \r\n      console.info(`Connecting ${caller}...`);\r\n  \r\n      // Connect to signaling server\r\n      socket = io('https://localhost:433');\r\n  \r\n      // We tell the server who we are\r\n      sendToServer({\r\n        name: caller,\r\n        date: Date.now(),\r\n        type: 'username',\r\n      });\r\n  \r\n      // When we receive the updated list of users we render them in the UI\r\n      socket.on('users', (msg) => {\r\n        const msgJSON = JSON.parse(msg);\r\n        updateListElement(msgJSON.users, usersListElement)\r\n      });\r\n  \r\n      // Listen to messages coming from signaling server\r\n      socket.on('message', (msg) => {\r\n        switch (msg.type) {\r\n          case 'offer':\r\n            answerOffer(msg);\r\n            break;\r\n  \r\n          case 'answer':\r\n            receiveAnswer(msg);\r\n            break;\r\n  \r\n          case 'ice-candidate':\r\n            addICECandidate(msg);\r\n            break;\r\n        }\r\n      });\r\n\r\n      socket.on('connect', (msg) =>{\r\n          console.error('Connected')\r\n      })\r\n    }\r\n  \r\n    async function inviteToVideoCall(event) {\r\n      // Check if we have an open connection already\r\n      if (peerConnection) {\r\n        console.warn('You already have a call open.');\r\n      } else {\r\n        receiver = event.target.getAttribute('data-target');\r\n  \r\n        if (receiver === caller) {\r\n          alert(\"You can't call yourself.\");\r\n          return;\r\n        }\r\n  \r\n        log('invite')\r\n        peerConnection = createPeerConnection();\r\n  \r\n        // Requesting webcam access...\r\n        localVideo.srcObject = await getLocalMedia(peerConnection);\r\n      }\r\n    }\r\n    var videoIndex = 0;\r\n    function createPeerConnection() {\r\n      console.log(`${caller} inviting ${receiver} to video call...`);\r\n  \r\n      // Starts the peer connection\r\n      const peerConnection = new RTCPeerConnection(servers);\r\n  \r\n      // Sends out our ICE candidate through our signaling server\r\n      peerConnection.onicecandidate = ({ candidate }) => {\r\n        if (candidate) {\r\n          sendToServer({\r\n            type: 'ice-candidate',\r\n            target: receiver, // on the receiver side this is undefined.\r\n            candidate: candidate,\r\n          });\r\n        }\r\n      };\r\n  \r\n      // Creates an offer and sends it out through the signaling server\r\n      peerConnection.onnegotiationneeded = createOffer;\r\n  \r\n      // When we get a track we add it to our remote video element\r\n  \r\n      peerConnection.ontrack = event => {\r\n        console.error('-------------------------')\r\n        console.log(event.transceiver.mid);\r\n        console.log(event.streams);\r\n        console.error('-------------------------')\r\n        if (event.transceiver.mid == 0) {\r\n          remoteVideo.srcObject = event.streams[0]\r\n        }\r\n        if (event.transceiver.mid == 1) {\r\n          remoteVideo2.srcObject = event.streams[0]\r\n        }\r\n        if (event.transceiver.mid == 2) {\r\n          remoteVideo3.srcObject = event.streams[0]\r\n        }\r\n      };\r\n   \r\n      return peerConnection;\r\n    }\r\n  \r\n    async function createOffer() {\r\n      console.log(`${caller} is creating an offer for ${receiver}`);\r\n  \r\n      try {\r\n        // 1. Create an offer\r\n        const offer = await peerConnection.createOffer();\r\n        // 2. set the offer as local description\r\n        await peerConnection.setLocalDescription(offer);\r\n        // Send offer to remote peer\r\n        sendToServer({\r\n          name: caller,\r\n          target: receiver,\r\n          type: 'offer',\r\n          sdp: peerConnection.localDescription,\r\n        });\r\n      } catch (error) {\r\n        console.error(`Error when creating the offer: ${error}`);\r\n      }\r\n    }\r\n  \r\n    async function answerOffer(msg) {\r\n      // We save the reference of the people sending the offer\r\n      const receiver = msg.name;\r\n  \r\n      console.log(`${caller} is creating an answer for ${receiver}`);\r\n  \r\n      // Start the PeerConnection\r\n      log('answer')\r\n      peerConnection = createPeerConnection();\r\n  \r\n      // 4. The recipient receives the offer and record it as the remote description\r\n      try {\r\n        await peerConnection.setRemoteDescription(msg.sdp);\r\n        // 5. The recipient includes its stream to the connection\r\n        localVideo.srcObject = await getLocalMedia(peerConnection);\r\n        // 6. The recipient creates an answer\r\n        const answer = await peerConnection.createAnswer();\r\n        // 7. The recipient set the answer as its local description.\r\n        await peerConnection.setLocalDescription(answer);\r\n        // 8. The recipient uses the signaling server to send the answer to the caller.\r\n        sendToServer({\r\n          name: caller,\r\n          target: receiver,\r\n          type: 'answer',\r\n          sdp: peerConnection.localDescription,\r\n        });\r\n      } catch (error) {\r\n        console.error(`Error when creating the answer: ${error}`);\r\n      }\r\n    }\r\n  \r\n    // This function i scalled when the caller receives an answer from the recipient about\r\n    // the video call offer we sent\r\n    async function receiveAnswer(msg) {\r\n      console.log('handling answer ', msg);\r\n  \r\n      // 9. The caller receives the answer.\r\n      // 10. The caller set the answer as the remote description. It know knows the\r\n      // configuration of both peers. Media begins to flow as configured\r\n      await peerConnection.setRemoteDescription(msg.sdp);\r\n    }\r\n  \r\n    async function addICECandidate(msg) {\r\n      const candidate = new RTCIceCandidate(msg.candidate);\r\n  \r\n      try {\r\n        await peerConnection.addIceCandidate(candidate);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n  \r\n    /* DOM event listeners */\r\n  \r\n    // formLogin.addEventListener('submit', connect);\r\n    connect();\r\n    $('.form-overlay').hide();\r\n  \r\n    $(document).ready(() => {\r\n      function fullScreen(element) {\r\n        element.addEventListener('click', function () {\r\n          if (element.requestFullscreen) {\r\n            element.requestFullscreen();\r\n          }\r\n          else if (element.webkitRequestFullscreen) {\r\n            element.webkitRequestFullscreen();\r\n          }\r\n          else if (element.mozRequestFullScreen) {\r\n            element.mozRequestFullScreen();\r\n          }\r\n          else if (element.msRequestFullscreen) {\r\n            element.msRequestFullscreen();\r\n          }\r\n        });\r\n      }\r\n      \r\n      fullScreen(document.getElementById('remote-video1'));\r\n      fullScreen(document.getElementById('remote-video2'));\r\n      fullScreen(document.getElementById('remote-video3'));\r\n  \r\n    });\r\n  \r\n  })();"],"file":"webrtc.js"}